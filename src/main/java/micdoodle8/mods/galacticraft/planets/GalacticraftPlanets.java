package micdoodle8.mods.galacticraft.planets;

import java.io.*;
import micdoodle8.mods.galacticraft.planets.mars.*;
import micdoodle8.mods.galacticraft.planets.asteroids.*;
import micdoodle8.mods.galacticraft.planets.mars.world.gen.*;
import micdoodle8.mods.galacticraft.planets.asteroids.world.gen.*;
import net.minecraft.world.biome.*;
import cpw.mods.fml.common.network.*;
import cpw.mods.fml.common.*;
import micdoodle8.mods.galacticraft.planets.mars.entities.*;
import powercrystals.minefactoryreloaded.api.*;
import micdoodle8.mods.galacticraft.core.util.*;
import cpw.mods.fml.common.event.*;
import net.minecraft.block.*;
import micdoodle8.mods.galacticraft.api.vector.*;
import cpw.mods.fml.client.config.*;
import net.minecraftforge.common.config.*;
import cpw.mods.fml.client.event.*;
import cpw.mods.fml.common.eventhandler.*;
import java.util.*;

@Mod(modid = "GalacticraftMars", name = "Galacticraft Planets", version = "3.0.12", acceptedMinecraftVersions = "[1.7.2],[1.7.10]", useMetadata = false, dependencies = "required-after:GalacticraftCore;", guiFactory = "micdoodle8.mods.galacticraft.planets.ConfigGuiFactoryPlanets")
public class GalacticraftPlanets
{
    public static final String NAME = "Galacticraft Planets";
    @Mod.Instance("GalacticraftMars")
    public static GalacticraftPlanets instance;
    public static Map<String, IPlanetsModule> commonModules;
    public static Map<String, IPlanetsModuleClient> clientModules;
    public static final String MODULE_KEY_MARS = "MarsModule";
    public static final String MODULE_KEY_ASTEROIDS = "AsteroidsModule";
    @SidedProxy(clientSide = "micdoodle8.mods.galacticraft.planets.PlanetsProxyClient", serverSide = "micdoodle8.mods.galacticraft.planets.PlanetsProxy")
    public static PlanetsProxy proxy;

    @Mod.EventHandler
    public void preInit(final FMLPreInitializationEvent event) {
        FMLCommonHandler.instance().bus().register((Object)this);
        this.initModInfo(event.getModMetadata());
        final File oldMarsConf = new File(event.getModConfigurationDirectory(), "Galacticraft/mars.conf");
        final File newPlanetsConf = new File(event.getModConfigurationDirectory(), "Galacticraft/planets.conf");
        boolean update = false;
        if (oldMarsConf.exists()) {
            oldMarsConf.renameTo(newPlanetsConf);
            update = true;
        }
        new ConfigManagerMars(newPlanetsConf, update);
        new ConfigManagerAsteroids(new File(event.getModConfigurationDirectory(), "Galacticraft/asteroids.conf"));
        GalacticraftPlanets.commonModules.put("MarsModule", new MarsModule());
        GalacticraftPlanets.commonModules.put("AsteroidsModule", (IPlanetsModule)new AsteroidsModule());
        GalacticraftPlanets.proxy.preInit(event);
        final BiomeGenBase biomeMarsPreInit = BiomeGenBaseMars.marsFlat;
        final BiomeGenBase biomeAsteroidsPreInit = BiomeGenBaseAsteroids.asteroid;
    }

    private void initModInfo(final ModMetadata info) {
        info.autogenerated = false;
        info.modId = "GalacticraftMars";
        info.name = "Galacticraft Planets";
        info.version = "3.0.12";
        info.description = "Planets addon for Galacticraft.";
        info.authorList = Arrays.asList("micdoodle8", "radfast", "EzerArch", "fishtaco", "SpaceViking", "SteveKunG");
    }

    @Mod.EventHandler
    public void init(final FMLInitializationEvent event) {
        GalacticraftPlanets.proxy.init(event);
        NetworkRegistry.INSTANCE.registerGuiHandler(GalacticraftPlanets.instance, GalacticraftPlanets.proxy);
    }

    @Mod.EventHandler
    public void postInit(final FMLPostInitializationEvent event) {
        GalacticraftPlanets.proxy.postInit(event);
        try {
            if (Loader.isModLoaded("MineFactoryReloaded")) {
                FactoryRegistry.sendMessage("registerSpawnHandler", new MFRSpawnHandlerSlimeling());
            }
        }
        catch (Exception e) {
            GCLog.severe("Error when attempting to register Slimeling auto-spawnhandler in MFR");
            GCLog.exception(e);
        }
    }

    @Mod.EventHandler
    public void serverStarting(final FMLServerStartingEvent event) {
        GalacticraftPlanets.proxy.serverStarting(event);
    }

    public static int getBlockRenderID(final Block block) {
        for (final IPlanetsModuleClient module : GalacticraftPlanets.clientModules.values()) {
            final int id = module.getBlockRenderID(block);
            if (id > 1) {
                return id;
            }
        }
        return 1;
    }

    public static void spawnParticle(final String particleID, final Vector3 position, final Vector3 motion, final Object... extraData) {
        for (final IPlanetsModuleClient module : GalacticraftPlanets.clientModules.values()) {
            module.spawnParticle(particleID, position, motion, extraData);
        }
    }

    public static List<IConfigElement> getConfigElements() {
        final List<IConfigElement> list = new ArrayList<IConfigElement>();
        final IPlanetsModule module = GalacticraftPlanets.commonModules.get(GalacticraftPlanets.commonModules.size() - 1);
        list.addAll(new ConfigElement(module.getConfiguration().getCategory("dimensions")).getChildElements());
        list.addAll(new ConfigElement(module.getConfiguration().getCategory("entities")).getChildElements());
        list.addAll(new ConfigElement(module.getConfiguration().getCategory("achievements")).getChildElements());
        list.addAll(new ConfigElement(module.getConfiguration().getCategory("entities")).getChildElements());
        list.addAll(new ConfigElement(module.getConfiguration().getCategory("general")).getChildElements());
        return list;
    }

    @SubscribeEvent
    public void onConfigChanged(final ConfigChangedEvent event) {
        if (event.modID.equals("GalacticraftMars")) {
            for (final IPlanetsModule module : GalacticraftPlanets.commonModules.values()) {
                module.syncConfig();
            }
        }
    }

    static {
        GalacticraftPlanets.commonModules = new HashMap<String, IPlanetsModule>();
        GalacticraftPlanets.clientModules = new HashMap<String, IPlanetsModuleClient>();
    }
}
